#TextProBar.py
#  -*- coding : utf-8 -*-
import time

scale=50
print("开始执行".center(scale//2,"-"))
start=time.perf_counter()
for i in range(scale+1):
    a="*"*i
    b="."*(scale-i)
    c=round((i/scale)*100)
    """
    由于在python中浮点数的计算可能会出现不确定尾数，所以使用round函数(返回浮点数的四舍五入值）
    round(x[,n])   其中[ ]的参数可以省略  
    x为数字表达式 n表示要四舍五入的小数点位数 默认为0
    """
    t=time.perf_counter()-start
    # print("{}".format(c))
    print("\r[{:^4.1f}%:{}->{}]{:.2f}".format(c,a,b,t),end="")

    # print("\r{:^3.0f}%[{}->{}]{:.2f}s".format(c,a,b,t),end="")
    #以上该行为嵩天老师给出的代码
    #关于代码中{:^ 的用法可以看https://www.jb51.net/article/63672.htm（以复制删帖至以下注释中）
"""
填充与对齐
填充常跟对齐一起使用
^、<、>分别是居中、左对齐、右对齐，后面带宽度
:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充
比如:
In [15]: '{:>8}'.format('189')
Out[15]: '   189'
In [16]: '{:0>8}'.format('189')
Out[16]: '00000189'
In [17]: '{:a>8}'.format('189')
Out[17]: 'aaaaa189'
------------------------------------------------------------------
精度与类型f
精度常跟类型f一起使用

In [44]: '{:.2f}'.format(321.33345)
Out[44]: '321.33'
其中.2表示长度为2的精度，f表示float类型。
------------------------------------------------------------------
其他类型
主要就是进制了，b、d、o、x分别是二进制、十进制、八进制、十六进制。

In [54]: '{:b}'.format(17)
Out[54]: '10001'
In [55]: '{:d}'.format(17)
Out[55]: '17'
In [56]: '{:o}'.format(17)
Out[56]: '21'
In [57]: '{:x}'.format(17)
Out[57]: '11'
用，号还能用来做金额的千位分隔符。

In [47]: '{:,}'.format(1234567890)
Out[47]: '1,234,567,890'

"""

    # time.sleep(0.5)
print("执行结束".center(scale//2,"-"))




